# -*- coding: utf-8 -*-
"""연습용.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cI7vkqxs5WMh_9o0NpCARdKUabvS0EOe
"""

import itertools
import math
def solution(nums):
  #3개씩 순열.
  com_list = []; count = 0
  for i in list(itertools.combinations(nums, 3)):
    com_list.append(sum(i))
  
  for num in com_list: #에라토스테네스의 체 사용
    Is_Prime = True
    for i in range(2, int(math.sqrt(num)+1)):	# 2부터 x의 제곱근까지의 숫자
      if num % i == 0:		# 나눠떨어지는 숫자가 있으면 소수가 아님
        Is_Prime = False
    if(Is_Prime==True):
      count+=1  
  return count

print(solution([1,2,3,4]))
print(solution([1,2,7,6,4]))

#에라토스테네스의 체
#1과 자기자신을 제외한 약수가 존재하는지 확인하려면, 자기자신의 제곱근(루트)까지만 확인하면 된다는 뜻이다.
#->어차피 약수들이 대칭적으로 짝을 이루기 때문에.

#다른 사람의 풀이1.. 내가 하려는 방식과 가장 비슷함..
def solution(nums):
    from itertools import combinations as cb
    answer = 0
    for a in cb(nums, 3):
        cand = sum(a)
        for j in range(2, cand):
            if cand%j==0:
                break
        else:
            answer += 1
    return answer

#다른 사람의 풀이2..깔꼼쓰쓰
from itertools import combinations
def prime_number(x):
    answer = 0
    for i in range(1,int(x**0.5)+1):
        if x%i==0:
            answer+=1
    return 1 if answer==1 else 0

def solution(nums):
    return sum([prime_number(sum(c)) for c in combinations(nums,3)])