# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WM3VWkTr_hdUuxpAYUwcp_Fq_E_fh4uY
"""

#섞은 음식의 스코빌 지수 = 가장 맵지 않은 음식의 스코빌 지수 + (두 번째로 맵지 않은 음식의 스코빌 지수 * 2)
#Leo는 모든 음식의 스코빌 지수가 K 이상이 될 때까지 반복하여 섞습니다.
import heapq
def solution(scoville, K):
    heapq.heapify(scoville)
    
    result = 0

    while len(scoville) >= 2:
      min = heapq.heappop(scoville) #힙에서 최솟값 가져오기
        
      if(min >= K):
        return result
      else:
        min_2 = heapq.heappop(scoville) #두 번째로 작은 값
        heapq.heappush(scoville, min+(min_2*2)) #가장 덜 매운 애들 섞기
        result+=1
        # print("step{}: [{},{}] 합침".format(result, min , min_2))
        # print("       →", scoville)

    if scoville[0] >= K:
      return result
    else:
      return -1

print(solution([1, 2, 3, 9, 10, 12],7))
print(solution([3, 5, 1, 8, 3, 2, 1, 9],7))    
print(solution([3, 5, 1, 8, 3, 2, 1, 9],130))

#다른 사람 풀이
# import heapq as hq

# def solution(scoville, K):

#     hq.heapify(scoville)
#     answer = 0
#     while True:
#         first = hq.heappop(scoville)
#         if first >= K:
#             break
#         if len(scoville) == 0:
#             return -1
#         second = hq.heappop(scoville)
#         hq.heappush(scoville, first + second*2)
#         answer += 1  

#     return answer

#2
# from heapq import heapify, heappush, heappop
# def solution(scoville, K):
#     heapify(scoville)
#     for i in range(1000000):
#         try:
#             heappush(scoville, heappop(scoville)+(heappop(scoville)*2))
#             if scoville[0] >= K: return i+1
#         except:
#             return -1

#3
# import heapq

# def solution(scoville, K):
#     heapq.heapify(scoville)
#     size, cnt = len(scoville) - 1, 0
#     f = heapq.heappop(scoville)
#     while size > 0:
#         s = heapq.heappop(scoville)
#         f = heapq.heappushpop(scoville, f + s + s)
#         if f >= K:
#             return cnt + 1
#         cnt += 1
#         size -= 1
#     return -1