# -*- coding: utf-8 -*-
"""Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c75-Cr0TfQuGgHxqaIJ0bE00EscZMsOS
"""

import numpy as np
import statistics
from collections import Counter
def solution(participant, completion):
    cnt_p = Counter(participant) #participant의 종류 구하기
    cnt_c = Counter(completion) #completion의 종류 구하기
    
    for i in participant:
        if(cnt_p[i]==cnt_c[i]): #두 개 종류의 개수 안 맞으면 리턴
            continue
        else:
            return i

#뭐야 왤케 짧음
# import collections

#def solution(participant, completion):
#     answer = collections.Counter(participant) - collections.Counter(completion)
#     return list(answer.keys())[0]


#ㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎ
# def solution(participant, completion):
#     answer = ''
#     temp = 0
#     dic = {}
#     for part in participant:
#         dic[hash(part)] = part
#         temp += int(hash(part))
#     for com in completion:
#         temp -= hash(com)
#     answer = dic[temp]

#     return answer

#ㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎ
# def solution(participant, completion):
#     participant.sort()
#     completion.sort()
#     for p, c in zip(participant, completion):
#         if p != c:
#             return p
#     return participant[-1]

#ㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎㅎ
#def solution(participant, completion):
    # participant_set = set(participant)
    # completion_set = set(completion)
    # result = list(participant_set - completion_set)
    # if result !=[]:
    #     return result[0]
    # else:
    #     for c in completion:
    #         a=completion.count(c)
    #         b=participant.count(c)
    #         if(a != b):
    #             return c
    # return None