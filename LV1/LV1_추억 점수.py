# -*- coding: utf-8 -*-
"""연습용.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cI7vkqxs5WMh_9o0NpCARdKUabvS0EOe
"""

def solution(name, yearning, photo):
  # 사진 속에 나오는 인물의 그리움 점수를 모두 합산한 값이 해당 사진의 추억 점수가 됨.
  # 사진 속 인물의 이름이 ["may", "kein", "kain"], 
  #각 인물의 그리움 점수 [5점, 10점, 1점]
  # 사진의 추억 점수는 16(5 + 10 + 1)점
  # 다른 사진 속 인물의 이름이 ["kali", "mari", "don", "tony"],
  # ["kali", "mari", "don"]의 그리움 점수가 각각 [11점, 1점, 55점]],
  # "tony"는 그리움 점수가 없을 때, 이 사진의 추억 점수는 3명의 그리움 점수를 합한 67(11 + 1 + 55)점
  # 그리워하는 사람의 이름을 담은 문자열 배열 name, 각 사람별 그리움 점수를 담은 정수 배열 yearning, 
  # 각 사진에 찍힌 인물의 이름을 담은 이차원 문자열 배열 photo가 주어질 때
  # 사진들의 추억 점수를 photo에 주어진 순서대로 배열에 담아 return

  #리스트로 들어오는 거를 딕셔너리로 바꿔서 나중에 합산하면 되지 않을까?

  miss_dic = {}
  result = []
  
  for i in range(len(name)-len(yearning)): #굳이 해야할까
    yearning.append(0)
  
  for i in range(len(name)):
    miss_dic[name[i]] = yearning[i]
 
  for nam_miss in photo:
    sum = 0
    for nam in nam_miss:
      if nam in miss_dic:
        sum = sum + miss_dic[nam]
    result.append(sum)

  return result

print(solution(["may", "kein", "kain", "radi"],[5, 10, 1, 3],[["may", "kein", "kain", "radi"],["may", "kein", "brin", "deny"], ["kon", "kain", "may", "coni"]]))
print(solution(["kali", "mari", "don"],	[11, 1, 55],[["kali", "mari", "don"], ["pony", "tom", "teddy"], ["con", "mona", "don"]]))
print(solution(["may", "kein", "kain", "radi"],[5, 10, 1, 3],	[["may"],["kein", "deny", "may"], ["kon", "coni"]]))

# 다른 사람의 풀이1..이걸 한 줄로도 가능하구나...for문 투성이인 내꺼보다는 훨씬 나을 듯
def solution(이름, 점수, 사진):
    return [sum(점수[이름.index(j)] for j in i if j in 이름) for i in 사진]

#이걸 한 줄로 만든 거 같음.
# for i in 사진:
#   for j in i:
#     if j in 이름:
#       sum(점수[이름.index(j)])