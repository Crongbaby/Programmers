# -*- coding: utf-8 -*-
"""Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c75-Cr0TfQuGgHxqaIJ0bE00EscZMsOS

**같은 숫자는 싫어**

배열 arr가 주어집니다. 배열 arr의 각 원소는 숫자 0부터 9까지로 이루어져 있습니다. 이때, 배열 arr에서 연속적으로 나타나는 숫자는 하나만 남기고 전부 제거하려고 합니다. 단, 제거된 후 남은 수들을 반환할 때는 배열 arr의 원소들의 순서를 유지
"""

def solution(arr):
    result=[]
    result.append(arr[0])
    for i in range(1,len(arr)):
        if(arr[i-1] != arr[i]):
            result.append(arr[i])
    return result

#같은 숫자는 싫어 - 지원
def solution(arr):
    answer = []
    for i in range(len(arr)):
        if i == 0:
            answer.append(arr[i])
        elif arr[i] != arr[i-1]:
            answer.append(arr[i])
    return answer

print(solution([1,1,3,3,0,1,1]))

"""**올바른 괄호**

괄호가 바르게 짝지어졌다는 것은 '(' 문자로 열렸으면 반드시 짝지어서 ')' 문자로 닫혀야 한다는 뜻입니다.'(' 또는 ')' 로만 이루어진 문자열 s가 주어졌을 때, 문자열 s가 올바른 괄호이면 true를 return 하고, 올바르지 않은 괄호이면 false를 return 하는 solution 함수를 완성해 주세요.
"""

def solution(s):
  #stack 사용해야할 듯
  #리스트로만 생각했는데...
    stack = []
    for i in s:
        if i == '(':  # '('는 stack에 추가
            stack.append(i)
        else:  # i == ')'인 경우
            if stack == []:  # 괄호 짝이 ')'로 시작하면 False 반환
                return False
            else:
                stack.pop()  # '('가 ')'와 짝을 이루면 stack에서 '(' 하나 제거
    
    return stack==[]

# 이 방식대로 하려고 했음
# def is_pair(s):
#     # 함수를 완성하세요
#     open_cnt = 0
#     for c in s:
#         if c == '(':
#             open_cnt += 1
#         elif c == ')':
#             open_cnt -= 1
#             if open_cnt < 0:
#                 return False
#     return open_cnt == 0

"""**기능개발**

각 기능의 개발속도는 모두 다르기 때문에 뒤에 있는 기능이 앞에 있는 기능보다 먼저 개발될 수 있고, 이때 뒤에 있는 기능은 앞에 있는 기능이 배포될 때 함께 배포됩니다.

먼저 배포되어야 하는 순서대로 작업의 진도가 적힌 정수 배열 progresses와 각 작업의 개발 속도가 적힌 정수 배열 speeds가 주어질 때 각 배포마다 몇 개의 기능이 배포되는지를 return 하도록 solution 함수를 완성
"""

def solution(progresses, speeds):
    #speed*day = 남은 %
    # 뒤에 애가 끝나도 앞에 애가 안 끝나면 같이 배포해야함
    queue = []
    day = []
    return_queue = []
    for i in range(len(progresses)):
        for j in range(1,100):
        #배포 되는 날 알아내고 queue에 넣기
          if((100 - progresses[i]) <= (speeds[i] * j)):
              day.append(j) #남은 프로세스 보다 스피드*날짜가 같거나 클 날짜들
              break #day 첫번째껏만 넣고 빠져나가게 함
        queue.append(day[i]) #배포날 큐에 넣기
    #print('queue: ',queue) #확인용-> 맞음

    max_index = 0
    max_index_list = []
    for i in range(len(queue)):
      for j in range(i+1,len(queue)):
        if(i == 0):
          max_index_list.append(0)
        #앞의 배포일보다 큰 바로 뒤의 배포일(인덱스) 찾아내기
        #첫 번째 if문은 확인용 1,3번 방지용 (max_index - i에서 1이 감해져서 나와서)
        if((queue[max_index_list[i]] <= queue[j]) and (queue[max_index_list[i]] == queue[-1])): 
          max_index = j+1
          break
        elif(queue[max_index_list[i]] <= queue[j]): 
          max_index = j
          break
        else:
          max_index = len(queue)  #자기보다 큰 값이 없으면 뒤에 모든 날짜 동일하게 배포

      # print('i: ', i)
      # print('j: ',j)
      # print('max_index_list:',max_index_list[i])
      # print('queue[max_index_list[i]:',queue[max_index_list[i]])   
      # print('max_index: ',max_index)

      return_queue.append(max_index - i)
      max_index_list.append(max_index)

      sum = 0
      for index in return_queue:
        sum += index
      if(sum == len(progresses)): #뒤에 계속 계산하지 말고 프로세스 개수만큼 배포했는지 확인
        break
      # print('return_queue:', return_queue)
      # print()
         
    return return_queue

#확인용
# print(solution([93, 30, 55], [1, 30, 5]))
# print(solution([95, 90, 99, 99, 80, 99], [1, 1, 1, 1, 1, 1]))
#print(solution([77,80,90],[3,2,1]))
#print(solution([80,90,70,70,75], [2,2,6,3,5]))
#print(solution([80,80,80,80,80], [2,2,2,2,2]))

import math
#영창님 코드 ceil 소수점이 있으면 무조건 올림
def solution(progresses, speeds):
    answer = []

    progress = [0] * len(progresses)
    for i in range(len(progresses)) :
        progress[i] = math.ceil((100 - progresses[i]) / speeds[i])

    pivot = progress[0]
    cnt = 0

    while progress:
        v = progress.pop(0)
        if v > pivot:
            answer.append(cnt)
            cnt = 1
        else:
            cnt += 1
        pivot = max(pivot, v)

    answer.append(cnt)
    return answer

"""**프린터**

1. 인쇄 대기목록의 가장 앞에 있는 문서(J)를 대기목록에서 꺼냅니다.
2. 나머지 인쇄 대기목록에서 J보다 중요도가 높은 문서가 한 개라도 존재하면 J를 대기목록의 가장 마지막에 넣습니다.
3. 그렇지 않으면 J를 인쇄합니다.
"""

# def solution(priorities, location):
#     find = wait_list[location]
#     wait_list = []
#     for i in range(len(priorities)):
#         wait_list.append(priorities[i])
        
#     first = wait_list[0] 
#     #우선순위 정하기
#     #같은 걸 어떻게 구분하지
#     for i in range(1,len(priorities)):
#         for j in range(1,len(priorities)):
#             print('i: ',i)
#             if (first < priorities[j]):
#                 print('j: ',j)
#                 wait_list[:-1] = wait_list[1:]
#                 wait_list[-1] = first
#                 print('if first',first)
#                 first = wait_list[i] #그 다음 체크
#             else:
#                 print('j: ',j)
#                 first = wait_list[i] 
#                 print('else first',first)
#                 if (first < priorities[j-1]):
#                     wait_list[:-1] = wait_list[1:]
#                     wait_list[-1] = first
#         print(wait_list)
#     #return find_seq

from queue import PriorityQueue
#버려
def solution(priorities, location):
    #우선순위 큐
    que1 = PriorityQueue()
    
    #데이터 삽입(우선순위, 값(들어온 순서대로 1->2->...))
    for i in range(len(priorities)):
      if(i == location):
        que1.put((priorities[i],'location')) #우선순위, 값
      else:
        que1.put((priorities[i],'no')) #우선순위, 값
    
    wait_list = []
    #우선순위 잘 되는 지 확인용
    for i in range(len(priorities)):
        wait_list.append(que1.get()[1])
    wait_list.reverse() #맨 마지막이 가장 높은 우선순위라 뒤집기 필요
    print(wait_list)

    for i in range(len(wait_list)):
      if(wait_list[i] == 'location'):   
        return i+1

print(solution([2, 1, 3, 2],2))
print(solution([1, 1, 9, 1, 1, 1],0)) 
#print(solution())

#영창님 코드
from collections import deque

def solution(priorities, location):
    answer = 0

    priorities = deque([(v,i) for i,v in enumerate(priorities)])

    while len(priorities):
        item = priorities.popleft()
        if priorities and item[0] < max(priorities)[0]:
            priorities.append(item)
        else:
            answer += 1
            if(location == item[1]):
                break
    return answer

print(solution([2, 1, 3, 2], 2))

#영주의 코드
priorities1 = [2, 1, 3, 2]   # location 2
priorities2 = [1, 1, 9, 1, 1, 1]   # location 0

def solution(priorities, location):
    answer = 0

    while True :
        for i in range(len(priorities)) :
            if priorities[i] == max(priorities) :
                priorities[i] = 0
                answer += 1
                if i == location :
                    return answer

print(solution(priorities1, 2))
print(solution(priorities2, 0))

"""**다리를 지나는 트럭**

트럭 여러 대가 강을 가로지르는 일차선 다리를 정해진 순으로 건너려 합니다. 모든 트럭이 다리를 건너려면 최소 몇 초가 걸리는지 알아내야 합니다. 다리에는 트럭이 최대 bridge_length대 올라갈 수 있으며, 다리는 weight 이하까지의 무게를 견딜 수 있습니다. 단, 다리에 완전히 오르지 않은 트럭의 무게는 무시합니다.
"""

#영창님 코드
from collections import deque

def solution(bridge_length, weight, truck_weights):
    queue = deque([0]*bridge_length)
    truck_weights = deque(truck_weights)
    time, total = 0, 0
    while truck_weights:
        time += 1
        total -= queue.popleft()

        if total + truck_weights[0] > weight:
            queue.append(0)
        else:
            w = truck_weights.popleft()
            total += w
            queue.append(w)

    return time + bridge_length

print(solution(2, 10, [7,4,5,6]))

#재현님 코드 
#sum 쓰면 시간 초과 => for문을 돌다보니까 시간이 오래 걸림
#dequeue를 사용해서 시간 단축, sum 사용 자제하기
from collections import deque

def solution(bridge_length, weight, truck_weights):
    answer = 0
    bridge_deque = deque([0] * bridge_length)
    truck_deque = deque(truck_weights)

    while bridge_deque:
        answer += 1
        bridge_deque.popleft()
        if truck_deque:
            if sum(bridge_deque) + truck_deque[0] <= weight:
                bridge_deque.append(truck_deque.popleft())
            else:
                bridge_deque.append(0)

    return answer

print(solution(2, 10, [7,4,5,6]))
print(solution(100, 100, [10]))
print(solution(100, 100, [10,10,10,10,10,10,10,10,10,10]))

"""**주식가격**"""

#영창님 코드
from collections import deque

def solution(prices):
    que = deque(prices)
    answer = []

    while que:
        pivot = que.popleft()
        cnt = 0
        for i in que:
            if pivot <= i:
                cnt += 1
            else:
                cnt += 1
                break
        answer.append(cnt)
    return answer

print(solution([1, 2, 3, 2, 3]))

#영주의 코드
prices = [1, 2, 3, 2, 3]

def solution(prices) :
  answer = [0] * len(prices)

  for i in range(len(prices)):
    for j in range(i+1, len(prices)) :
      if prices[i] <= prices[j]:
        answer[i] +=1
      else:
        answer[i]+=1
        break

  return answer

print(solution(prices))