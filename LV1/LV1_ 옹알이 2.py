# -*- coding: utf-8 -*-
"""연습용.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cI7vkqxs5WMh_9o0NpCARdKUabvS0EOe
"""

def solution(babbling): #가능한 경우가 다 찾지 말고 다른 경우도 구하기
  case = ["aya", "ye", "woo", "ma"]; count = 0

  for i in babbling:
    for j in ['aya','ye','woo','ma']: 
      if j*2 not in i: #반복.
        i = i.replace(j,' ')
    
    if len(i.strip())== 0: #이거 함수 엄청 찾음.
      count += 1

  return count

print(solution(["aya", "yee", "u", "maa"]))
print(solution(["ayaye", "uuu", "yeye", "yemawoo", "ayaayaa"]))

# 이걸로 해봤는데 문자가 반복되는 경우가 있는 걸 우째 해열해야할지 몰라서 따른 걸로 품.
# "ymae" 이런 문자열이 있다고 할때
# replace("ma", "") 이렇게 하면
# "ymae" -> "ye" 이렇게 되서 이 다음에 "ye" 를 체크할 때 제외되고 가능한 문자열이 되버립니다.
# 하지만 replace("ma", " ") 이렇게 하면
# "ymae" -> "y e" 이렇게 되서 이 다음에 "ye" 를 체크할 때 제외되지 않습니다.

# 다른 사람의 풀이1..
def solution(babbling):
    n = ["aya", "ye", "woo", "ma"]
    for k, i in enumerate(babbling):
        for j in n:
            if j*2 in i:break
            babbling[k]=babbling[k].replace(j, " ")
        babbling[k]=babbling[k].replace(" ", "")
    return babbling.count("")