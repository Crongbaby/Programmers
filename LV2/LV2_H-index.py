# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ig5lKbyBVTN0yxR9GGnWPaqG2ND0ypuM
"""

#논문 n편 중, h번 이상 인용된 논문이 h편 이상이고 나머지 논문이 h번 이하 인용되었다면 h의 최댓값이 이 과학자의 H-Index
#n편 중 h번 이상 인용된 논문 h편 이상 
#n편 중 h번 이하 인용된 논문 n-(h+alpha)편
#1 <= n <= 1000
#0 <= h <= 10000
#논문의 인용 횟수를 담은 배열 citations
#h의 최댓값이 이 과학자의 H-Index

#[3, 0, 6, 1, 5] 리스트의 요소: n , 3편 이상 인용 3편, 2편 이하 이용 2편
#내림차순으로 정렬을 하고 인덱스가 현재 존재하는 인덱스보다 크다면 그 전에 값을 리턴
def solution(citations):
    citations.sort(reverse=True) #내림차순
    for ind, citation in enumerate(citations):
        if citation <= ind :
            return ind
    return len(citations)
         

print(solution([3, 0, 6, 1, 5]))
print(solution([0,1,1]))
print(solution([4, 4, 4])) #중요
print(solution([2,2,2,1,0]))
print(solution([10, 10, 10, 10, 10]))
print(solution([0,0,0,0,0]))
print(solution([1,1,1,1])) #오류 해결
print(solution([6, 5, 5, 5, 3, 2, 1, 0]))

# const data = [
# { input: [3, 0, 6, 1, 5], answer: 3 },
#   { input: [0, 0, 0, 0, 0], answer: 0 },
#   { input: [0, 0, 0, 0, 1], answer: 1 },
#   { input: [9, 9, 9, 12], answer: 4 },
#   { input: [9, 7, 6, 2, 1], answer: 3 }, // from Wikipedia
#   { input: [10, 8, 5, 4, 3], answer: 4 }, // from Wikipedia
#   { input: [25, 8, 5, 3, 3], answer: 3 }, // from Wikipedia
#   { input: [1, 1, 5, 7, 6], answer: 3 },
#   { input: [0], answer: 0 },
#   { input: [0, 0], answer: 0 }
# ]

