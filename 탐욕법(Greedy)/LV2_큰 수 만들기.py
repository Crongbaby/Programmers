# -*- coding: utf-8 -*-
"""연습용.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cI7vkqxs5WMh_9o0NpCARdKUabvS0EOe
"""

from itertools import combinations
def solution(number, k):
  del_list = list(combinations(number, len(number) - k)) #n개 중에 n-k개 생성
  return ''.join(max(sorted(del_list,key=lambda x : ''.join(x))))
 
 #답은 맞는데 왜 자꾸 시간 초과가.....내 걸작이었는뎅
print(solution("1924",2))
print(solution("1231234",3))
print(solution("4177252841",4))

#시간초과 안 나는 다른 사람의 풀이....
# 알고리즘
# 스택 생성 => 파이썬에서는 리스트 활용 가능
# number를 순회 => for num in number:
# 다음 조건문을 모두 만족할 경우 명령문을 반복
# 조건문
# 1. k > 0
# 2. 스택이 비어있지 않음
# 3. 스택 마지막 값 < num
# 명령문
# 1. 스택을 pop
# k--
# 스택에 num을 push
# k > 0 이상이면 스택에서 k개 삭제 후 join해서 결과 값 반환

def solution(number, k):
    answer = [] # Stack
    
    for num in number:
        while k > 0 and answer and answer[-1] < num:
            answer.pop()
            k -= 1
        answer.append(num)
        
    return ''.join(answer[:len(answer) - k])

# Stack을 활용하기
# 예외 케이스까지 고려하기
# 중복된 코드 줄이고 최적화 된 코드 작성하기

#다른 사람 풀이2
def solution(number, k):
    stack = []
    for n in number:
        while stack and stack[-1] < n and k > 0:
            stack.pop()
            k -= 1
        stack.append(n)

    # 아직 제거되지 못 한 숫자를 뒤에서 삭제
    if k > 0:
        stack = stack[:-k]

    return ''.join(stack)